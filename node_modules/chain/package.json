{
  "name": "chain",
  "description": "A microframework for handling async JS",
  "version": "0.1.3",
  "homepage": "http://github.com/chriso/chain.js",
  "keywords": [
    "async",
    "asynchronous",
    "events",
    "parallel"
  ],
  "author": {
    "name": "Chris O'Hara",
    "email": "cohara87@gmail.com"
  },
  "main": "chain.js",
  "bugs": {
    "url": "http://github.com/chriso/chain.js/issues"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/chriso/chain.js.git"
  },
  "engines": {
    "node": ">=0.2.5"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "readme": "**chain.js is a microframework for handling asynchronous JavaScript** - *699 bytes gzipped*\r\n\r\nIt comes with built-in methods for running functions sequentially or in parallel, and lets you define your own methods to handle complex logic (e.g [load.js](https://github.com/chriso/load.js)).\r\n\r\n### run()\r\n\r\nRun each argument in parallel and then progress to the next method in the chain once all are complete\r\n\r\n    run(func1, func2).then(func3, func4);\r\n    \r\n### chain()\r\n\r\nRun each function sequentially\r\n\r\n    chain(func1, func2, func3).then(func4); // => equivalent to run(func1).then(func2).then(func3).then(func4);\r\n\r\n### defer()\r\n\r\nDefer execution of the next method in the chain\r\n\r\n    defer(500).thenRun(func1); //Delay execution for 0.5s\r\n    \r\nWe can combine built-ins to handle more complicated logic\r\n\r\n    run(func1, func2).then(func3, func4).thenChain(func5, func6).thenRun(func7);\r\n\r\n**Some things to note:**\r\n    \r\n- `then()` is an alias for the previous method in the chain\r\n- all methods have their own *then<Method>* alias - e.g. `run() === thenRun()`\r\n- separate chains run in their own context\r\n\r\n## Adding your own methods\r\n\r\n[load.js](https://github.com/chriso/load.js) ([this code](https://github.com/chriso/load.js/blob/master/load.js) in particular) is an example of what you can do with chain.js - it allows you to lazy load scripts in the browser and easily handle complex dependency chains\r\n\r\n    //Load script1 and script2 in parallel - when they're complete, load script3\r\n    \r\n    load('script1.js', 'script2.js').then('script3.js').thenRun(function () {\r\n        console.log('Done.');\r\n    });\r\n\r\nOr maybe we need to defer loading a script\r\n\r\n    defer(500).thenLoad('myscript.js');\r\n\r\nAnother example\r\n\r\n    var num = 0;\r\n    addMethod('add', function (args, argc) {\r\n        while(argc--) num += args[argc];\r\n        this.next(true); //Call the next method in the chain\r\n    });\r\n    \r\n    add(1, 2, 3).then(4, 5, 6); //num === 21\r\n    \r\n## But wait. How do we know when a function is complete?\r\n\r\nSynchronous functions are complete when they return something other than `null`\r\n\r\nAsynchronous functions are complete when they call `next()` - next is passed as the first argument to each function in the chain\r\n\r\n    run(function (next) {\r\n        setTimeout(function () {\r\n            //Do something..\r\n            next();\r\n        }, 100);\r\n    });\r\n\r\n## Passing state along the chain\r\n\r\nAll functions are called in the same context so variables can be shared using `this`\r\n\r\n    run(function () {\r\n        this.foo = 'bar';\r\n        return true;\r\n    }).then(function () {\r\n        console.log(this.foo); //'bar'\r\n    });\r\n\r\n## Error handling\r\n\r\nUse the `onError` method for adding an error handler. All methods in the chain are passed an error callback as the second argument and wrapped in a try..catch\r\n\r\n    onError(function (err) {\r\n        //Handle the error\r\n    }).thenRun(function (next, error) {\r\n        error('Something went wrong');\r\n    });\r\n\r\nWith async functions, it's ok to define the error handler at the end of the chain\r\n\r\n    run(async1, async2).then(async3).onError(my_handler);\r\n    \r\n## Installation\r\n\r\nBundle [chain-min.js](https://github.com/chriso/chain.js/blob/master/chain-min.js) or run `npm install chain`\r\n\r\n## License\r\n\r\n(MIT License)\r\n\r\nCopyright (c) 2010 Chris O'Hara <cohara87@gmail.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "README.md",
  "_id": "chain@0.1.3",
  "dist": {
    "shasum": "6cfea86f4c7d331a9aca9590bb8b6bfb88dccff3"
  },
  "_from": "chain@*",
  "_resolved": "https://registry.npmjs.org/chain/-/chain-0.1.3.tgz"
}
